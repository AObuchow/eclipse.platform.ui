<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.commands">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.commands" id="handlers" name="Handlers"/>
      </appInfo>
      <documentation>
         &lt;p&gt;A handler is an abstraction of the behaviour of a command.  At any given moment, a command will have either zero or one handler active.  When the command is asked to do anything, it will delegate this responsibility to the handler.  Through changes in the underlying model of the application, the handler might also change.  For example, in Eclipse, handlers tend to change when the active part changes.&lt;/p&gt;
&lt;p&gt;To avoid plug-in loading, we allow handlers to be specified in this extension point.  Using the &lt;code&gt;when&lt;/code&gt; attribute, it is possible for us to decide which handler is active without resorting to loading the handler.&lt;/p&gt;
&lt;p&gt;Handlers can be grouped together into &lt;code&gt;handlerGroups&lt;/code&gt;.  This allows one or more attributes and elements to be applied to a whole set of handlers.&lt;/p&gt;
&lt;p&gt;The handlers extension point can appear in either UI or non-UI plug-ins.&lt;/p&gt;
      </documentation>
   </annotation>

   <include schemaLocation="schema://org.eclipse.core.expressions/schema/expressionLanguage.exsd"/>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="handlerGroup"/>
            <element ref="handler"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="handler">
      <annotation>
         <documentation>
            A handler is the behaviour of a command at a particular point in time.  The behaviour is provided by a class.  The point in time is decide by the &lt;code&gt;when&lt;/code&gt; element.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="when"/>
         </sequence>
         <attribute name="commandId" type="string" use="required">
            <annotation>
               <documentation>
                  The identifier of the command which this handler handles.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class that should handle the given command under the given conditions.  If no conditions are given, then this is the default handler (i.e., it is active when no other handler is active).  If this class implements &lt;code&gt;IExecutableExtension&lt;/code&gt;, then it will be initialized as such.  Otherwise, there must be a default constructor.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.ui.commands.IHandler"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="editorId" type="string">
            <annotation>
               <documentation>
                  The identifier of the editor that must be active for this handler group to be active.  This is syntactic sugar for a &lt;code&gt;when&lt;/code&gt; element.  If specified, it is ANDed with any &lt;code&gt;when&lt;/code&gt; expression.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="partId" type="string">
            <annotation>
               <documentation>
                  The identifier of the part that must be active for this handler group to be active.  This is syntactic sugar for a &lt;code&gt;when&lt;/code&gt; element.  If specified, it is ANDed with any &lt;code&gt;when&lt;/code&gt; expression.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="when">
      <annotation>
         <documentation>
            The when element is a wrapper for some expression from &lt;code&gt;org.eclipse.core.expressions&lt;/code&gt;. It determines when a handler should be considered active for a command.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="with"/>
            <element ref="and"/>
            <element ref="or"/>
            <element ref="not"/>
            <element ref="test"/>
            <element ref="systemTest"/>
            <element ref="instanceof"/>
            <element ref="equals"/>
            <element ref="count"/>
            <element ref="iterate"/>
            <element ref="adapt"/>
            <element ref="resolve"/>
         </sequence>
      </complexType>
   </element>

   <element name="handlerGroup">
      <annotation>
         <documentation>
            A handler group is a way of applying certain default attribute values to a group of handlers.  This is used to minimize the amount of text that needs to be read in and parsed during start-up, and can also make the schema easier to read.  Handler groups contain handlers, and can nest handler groups.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="handlerGroup"/>
            <element ref="handler"/>
            <element ref="when"/>
         </sequence>
         <attribute name="editorId" type="string">
            <annotation>
               <documentation>
                  The identifier of the editor that must be active for this handler group to be active.  This is syntactic sugar for a &lt;code&gt;when&lt;/code&gt; element.  If specified, it is ANDed with any &lt;code&gt;when&lt;/code&gt; expression.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="partId" type="string">
            <annotation>
               <documentation>
                  The identifier of the part that must be active for this handler group to be active.  This is syntactic sugar for a &lt;code&gt;when&lt;/code&gt; element.  If specified, it is ANDed with any &lt;code&gt;when&lt;/code&gt; expression.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.1
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;Here is an example of a couple handler definitions:&lt;/p&gt;
&lt;pre&gt;
  &lt;handler
   commandId=&quot;doDance&quot;
   class=&quot;org.eclipse.ui.internal.CrashSystem&quot;&gt;
   &lt;when&gt;
    &lt;with variable=&quot;selection&quot;&gt;
     &lt;iterate operator=&quot;and&quot;&gt;
      &lt;instanceof value=&quot;org.eclipse.ui.internal.Gremlins&quot; /&gt;
      &lt;test
       name=&quot;fedLast&quot; 
       value=&quot;afterMidnight&quot; /&gt;
     &lt;/iterate&gt;
    &lt;/with&gt;
   &lt;/when&gt;
  &lt;/handler&gt;
  
  &lt;!--
  We allow groups to be specified to reduce definition size.
  --&gt;
  &lt;handlerGroup
   partId=&quot;views.mainScreen&quot;&gt;
   &lt;handler
    commandId=&quot;firePrimaryWeapon&quot;
    class=&quot;org.eclipse.ui.internal.SelectItem&quot; /&gt;
   &lt;handler
    commandId=&quot;fireSecondaryWeapon&quot;
    class=&quot;org.eclipse.ui.internal.GoBack&quot; /&gt;
  &lt;/handlerGroup&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;There is an &lt;code&gt;IHandler&lt;/code&gt; interface that all handlers must implement.&lt;/p&gt;
&lt;p&gt;TODO: We need a description of how handlers can learn about certain changes in the user interface.&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         &lt;p&gt;Copyright (c) 2004 IBM Corporation and others.&lt;/p&gt;
&lt;p&gt;All rights reserved. This program and the accompanying materials are made available under the terms of the Common Public License v1.0 which 
accompanies this distribution, and is available at &lt;a 
href=&quot;http://www.eclipse.org/legal/cpl-v10.html&quot;&gt;http://www.eclipse.org/legal/cpl-v10.html&lt;/a&gt;&lt;/p&gt;
      </documentation>
   </annotation>

</schema>
