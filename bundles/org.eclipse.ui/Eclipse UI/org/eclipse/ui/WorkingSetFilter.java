/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */package org.eclipse.ui;import org.eclipse.core.resources.IResource;import org.eclipse.core.runtime.IAdaptable;import org.eclipse.core.runtime.IPath;import org.eclipse.jface.viewers.Viewer;import org.eclipse.jface.viewers.ViewerFilter;/** * A viewer filter for a working set. */class WorkingSetFilter extends ViewerFilter {	private IWorkingSet workingSet = null;	private IAdaptable[] cachedWorkingSet = null;	/**	 * Returns the active working set.	 */	public IWorkingSet getWorkingSet() {		return workingSet;	}	/**	 * Sets the active working set.	 */	public void setWorkingSet(IWorkingSet workingSet) {		this.workingSet = workingSet;	}	/* (non-Javadoc)	 * Method declared on ViewerFilter.	 */	public boolean select(Viewer viewer, Object parentElement, Object element) {		if (workingSet == null)			return true;		if (element instanceof IAdaptable) {			IAdaptable adaptable = (IAdaptable) element;			IResource resource = (IResource) adaptable.getAdapter(IResource.class);			if (resource != null)				return isEnclosed(resource);		}		return true;	}	boolean isEnclosed(IResource element) {		IPath elementPath = element.getFullPath();		for (int i = 0; i < cachedWorkingSet.length; i++) {			IAdaptable adaptable = cachedWorkingSet[i];			IResource resource = (IResource) adaptable.getAdapter(IResource.class);			if (resource != null) {				IPath resourcePath = resource.getFullPath();				if (resourcePath.isPrefixOf(elementPath))					return true;				if (elementPath.isPrefixOf(resourcePath))					return true;			}		}		return false;	}	/*		* @see ViewerFilter#filter(Viewer, Object, Object[])		*/	public Object[] filter(Viewer viewer, Object parent, Object[] elements) {		Object[] result = null;		if (workingSet != null)			cachedWorkingSet = workingSet.getItems();		try {			result = super.filter(viewer, parent, elements);		} finally {			cachedWorkingSet = null;		}		return result;	}}