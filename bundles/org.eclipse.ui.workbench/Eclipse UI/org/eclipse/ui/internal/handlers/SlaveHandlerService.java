/******************************************************************************* * Copyright (c) 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     IBM Corporation - initial API and implementation ******************************************************************************/package org.eclipse.ui.internal.handlers;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import org.eclipse.core.commands.IHandler;import org.eclipse.core.expressions.Expression;import org.eclipse.core.expressions.IEvaluationContext;import org.eclipse.ui.ISourceProvider;import org.eclipse.ui.handlers.IHandlerActivation;import org.eclipse.ui.handlers.IHandlerService;import org.eclipse.ui.internal.services.INestable;/** * A handler service to which delegates almost all responsibility to the parent * service. It is only responsible for disposing of locally activated handlers * when it is disposed. * <p> * This class is not intended for use outside of the * <code>org.eclipse.ui.workbench</code> plug-in. * </p> * <p> * <strong>EXPERIMENTAL</strong>. This class or interface has been added as * part of a work in progress. There is a guarantee neither that this API will * work nor that it will remain the same. Please do not use this API without * consulting with the Platform/UI team. * </p> *  * @since 3.2 */public final class SlaveHandlerService implements IHandlerService, INestable {	/**	 * Whether the component with which this service is associated is active.	 */	private boolean active = false;	/**	 * The activations registered with this handler service. This value is	 * <code>null</code> if there are no activations.	 */	private Collection activations = null;	/**	 * The default expression to use when	 * {@link #activateHandler(String, IHandler)} is called. Handlers	 * contributed using that method will only be active when this service is	 * active. However, this expression will be used for conflict resolution.	 */	private final Expression defaultExpression;	/**	 * A map of the local activation to the parent activations. If this service	 * is inactive, then all parent activations are <code>null</code>.	 * Otherwise, they point to the corresponding activation in the parent	 * service.	 */	private Map mappedActivations = new HashMap();	/**	 * The parent handler service to which all requests are ultimately routed.	 * This value is never <code>null</code>.	 */	private final IHandlerService parent;	/**	 * Constructs a new instance.	 * 	 * @param parentHandlerService	 *            The parent handler service for this slave; must not be	 *            <code>null</code>.	 */	public SlaveHandlerService(final IHandlerService parentHandlerService,			final Expression defaultExpression) {		if (parentHandlerService == null) {			throw new NullPointerException(					"The parent handler service cannot be null"); //$NON-NLS-1$		}		this.defaultExpression = defaultExpression;		this.parent = parentHandlerService;	}	public final void activate() {		final Iterator localActivationItr = mappedActivations.keySet()				.iterator();		while (localActivationItr.hasNext()) {			final IHandlerActivation localActivation = (IHandlerActivation) localActivationItr					.next();			final String commandId = localActivation.getCommandId();			final IHandler handler = localActivation.getHandler();			final IHandlerActivation parentActivation = parent.activateHandler(					commandId, handler, defaultExpression);			mappedActivations.put(localActivation, parentActivation);		}	}	public final IHandlerActivation activateHandler(final String commandId,			final IHandler handler) {		final IHandlerActivation localActivation = new HandlerActivation(				commandId, handler, null, this);		final IHandlerActivation parentActivation;		if (active) {			parentActivation = parent.activateHandler(commandId, handler,					defaultExpression);		} else {			parentActivation = null;		}		mappedActivations.put(localActivation, parentActivation);		return localActivation;	}	public final IHandlerActivation activateHandler(final String commandId,			final IHandler handler, final Expression expression) {		final IHandlerActivation activation = parent.activateHandler(commandId,				handler, expression);		if (activations == null) {			activations = new ArrayList();		}		activations.add(activation);		return activation;	}	public final IHandlerActivation activateHandler(final String commandId,			final IHandler handler, final Expression expression,			final int sourcePriorities) {		final IHandlerActivation activation = parent.activateHandler(commandId,				handler, expression);		if (activations == null) {			activations = new ArrayList();		}		activations.add(activation);		return activation;	}	public final void addSourceProvider(final ISourceProvider provider) {		parent.addSourceProvider(provider);	}	public final void deactivate() {		final Collection parentActivations = mappedActivations.values();		parent.deactivateHandlers(parentActivations);		final Iterator localActivationItr = mappedActivations.keySet()				.iterator();		while (localActivationItr.hasNext()) {			final IHandlerActivation localActivation = (IHandlerActivation) localActivationItr					.next();			mappedActivations.put(localActivation, null);		}	}	public final void deactivateHandler(final IHandlerActivation activation) {		if (mappedActivations.containsKey(activation)) {			final IHandlerActivation parentActivation = (IHandlerActivation) mappedActivations					.get(activation);			if (parentActivation != null) {				parent.deactivateHandler(parentActivation);			}		} else if (activations != null) {			activations.remove(activation);			if (activations.isEmpty()) {				activations = null;			}			parent.deactivateHandler(activation);		}	}	public final void deactivateHandlers(final Collection activations) {		final Iterator activationItr = activations.iterator();		while (activationItr.hasNext()) {			final IHandlerActivation activation = (IHandlerActivation) activationItr					.next();			deactivateHandler(activation);		}	}	public final void dispose() {		if (activations != null) {			parent.deactivateHandlers(activations);			activations = null;		}	}	public final IEvaluationContext getCurrentState() {		return parent.getCurrentState();	}	public final void readRegistry() {		parent.readRegistry();	}	public final void removeSourceProvider(final ISourceProvider provider) {		parent.removeSourceProvider(provider);	}}